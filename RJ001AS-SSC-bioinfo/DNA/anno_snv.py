#!/usr/bin/env python3
import os
import sys
import argparse
import re
import logging
REAL_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(os.path.dirname(REAL_DIR), "common"))
import tools

logging.basicConfig(level=logging.INFO,
                    format="[%(asctime)s - %(levelname)s] %(message)s",
                    datefmt="%Y-%m-%d %H:%M:%S")


def parse_arguments():
    parser = argparse.ArgumentParser(description="annotate snv with known hotspot sites")
    parser.add_argument("--hotspot", dest="hotspot_file", required=True,
                        help="path to hotspot file")
    parser.add_argument("--vcf", dest="vcf_file", required=True,
                        help="calling result that generated by calling tool")
    parser.add_argument("--sample-name", dest="sample_name",
                        required=True, help="sample name")
    parser.add_argument("--out-file", required=True,  dest="out_file")
    return parser.parse_args()


def main():
    args = parse_arguments()
    hotspot_file = args.hotspot_file
    vcf_file = args.vcf_file
    sample_name = args.sample_name
    out_file = args.out_file
    anno_vcf(vcf_file, hotspot_file, sample_name, out_file)


def load_hotspot_file(hotspot_file):
    """load hotspot file, and return 

    Args:
        hotspot_file (string): path to the hotspot database file

    Returns:
        dict (tuple: dict): key is a tuple filled with chrom, start, ref, alt, value is a dict with content of a row
    """
    out_dict = dict()
    headers = ["Chr", "Position_Start", "Position_End", "Reference", "Mutation",
               "Gene", "HGVSc", "HGVSp", "Exon", "Mutation_Type", "dbsnp", "cosmic"]
    idx = 0
    with open(hotspot_file, 'r') as finp:
        for line in finp.readlines():
            idx += 1
            try:
                cols = line.strip("\n").split("\t")
                chrom = cols[0]
                start = cols[1]
                ref = cols[3]
                alt = cols[4]
                key = (chrom, start, ref, alt)
                out_dict[key] = dict(zip(headers, cols))
            except Exception as e:
                logging.error(f"ERROR FOUND in L{idx} with content {cols}")
                raise Exception
    return out_dict


def anno_vcf(vcf_file, hotspot_file, sample_name, out_file):
    fout = open(out_file, 'w')
    out_headers = ["Sample_Name", "Chr", "Position_Start", "Position_End", "Reference", "Mutation", "DP", "AD",
                   "Mutation_Frequency", "Gene", "HGVSc", "HGVSp", "Exon", "Mutation_Type", "dbsnp", "cosmic", "Status"]
    fout.write("\t".join(out_headers) + "\n")
    hotspot_dict = load_hotspot_file(hotspot_file)
    import vcfpy
    reader = vcfpy.Reader.from_path(vcf_file)
    for record in reader:
        if not record.is_snv():
            continue
        key = (record.CHROM, str(record.POS), record.REF, record.ALT[0].value)
        if key not in hotspot_dict:
            continue
        hotspot_info = hotspot_dict[key]
        call_data = record.calls[0].data
        info_data = record.INFO
        adp = info_data.get('ADP')
        ad = call_data.get('AD')
        # freq = call_data.get("FREQ").replace("%", "")
        if record.POS == 140453136 and record.REF == 'A' and \
                record.ALT[0].value == 'T':
            status = "Pass"
        elif record.POS == 1295250 and record.REF == 'G' and \
                record.ALT[0].value == 'A':
            status = "Pass"
        elif record.POS == 1295228 and record.REF == 'G' and \
                record.ALT[0].value == 'A':
            status = "Pass"
        else:
            status = "Fail"
        variant_info = dict()
        variant_info.update(hotspot_info)
        variant_info["Sample_Name"] = sample_name
        variant_info["DP"] = adp
        variant_info["AD"] = ad
        variant_info["Mutation_Frequency"] = call_data.get("FREQ")
        variant_info["Status"] = status
        if status == "Pass":
            fout.write("\t".join([str(variant_info[h]) for h in out_headers]) + "\n")
    reader.close()
    fout.close()

if __name__ == '__main__':
    main()